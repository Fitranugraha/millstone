"""
Script that generates the SNP Filter Key Map.

In our setup, we may want to query against data for an entire Variant, data
captured in VaiantCallerCommonData, or data describing the relationship between
a single Variant and ExperimentSample, captured in VariantEvidence.


Note that the fields are stored in a key-value
field in the database, and because the values may be of different types,
we just pickle the pyvcf object to store it.

The maps defined here specify:
    * the valid keys that can be filtered agains
    * which data object they are located in, SNPCallerCommonData or SNPEvidence
    * the type and number of the field (i.e. array or single, integer, float,
        or string)
    * the valid operations that can be performed on the types.
"""

import pprint

import vcf


MAP_OUTPUT_LOCATION = 'snp_filter_key_map.py'

HEADER_STRING = (
        '"""\n'
        'GENERATED BY generate_filter_key_map.py. DO NOT MODIFY BY HAND.\n'
        '"""\n\n'
)

SOURCE_VCF = 'snp_filter_key_map_source.vcf'


SNP_CALLER_COMMON_DATA_HARD_CODED = {
    'CHROM': {'type': 'String', 'num': 1},
    'POS': {'type': 'Integer', 'num': 1},
    'REF': {'type': 'String', 'num': 1},
    'ALT': {'type': 'String', 'num': -2}
}


SNP_EVIDENCE_HARD_CODED = {
    'gt_type': {'type': 'Integer', 'num': 1},
    'is_het': {'type': 'Boolean', 'num': 1}
}


def generate_filter_key_map(source_vcf=SOURCE_VCF):
    """The strategy is to use pyvcf to do the heavy-lifting of parsing the vcf
    header and get the types for each key out of there.

    The we create a map specific to our purposes and save to an output file
    so we can see it explicitly, and in case we want to make manual changes.
    """
    vcf_source_fh = open(source_vcf)
    vcf_reader = vcf.Reader(vcf_source_fh)

    with open(MAP_OUTPUT_LOCATION, 'w') as output_fh:
        # Write the header.
        output_fh.write(HEADER_STRING)

        # Write the map with the keys for SNPCallerCommonData
        snp_caller_common_data_map = {}
        for orig_key, value in vcf_reader.infos.iteritems():
            key = 'INFO_' + orig_key
            inner_map = {}
            inner_map['type'] = value.type
            inner_map['num'] = value.num
            snp_caller_common_data_map[key] = inner_map
        snp_caller_common_data_map.update(SNP_CALLER_COMMON_DATA_HARD_CODED)
        output_fh.write('VARIANT_CALLER_COMMON_MAP = ')
        output_fh.write(pprint.pformat(snp_caller_common_data_map, indent=4))
        output_fh.write('\n\n')

        # Write the map with the keys for SNPEvidence
        snp_evidence_data_map = {}
        for orig_key, value in vcf_reader.formats.iteritems():
            key = orig_key
            inner_map = {}
            inner_map['type'] = value.type
            inner_map['num'] = value.num
            snp_evidence_data_map[key] = inner_map
        snp_evidence_data_map.update(SNP_EVIDENCE_HARD_CODED)
        output_fh.write('VARIANT_EVIDENCE_MAP = ')
        output_fh.write(pprint.pformat(snp_evidence_data_map, indent=4))
        output_fh.write('\n')


    # Test the generated file by running imports.
    from snp_filter_key_map import VARIANT_CALLER_COMMON_MAP
    from snp_filter_key_map import VARIANT_EVIDENCE_MAP


if __name__ == '__main__':
    generate_filter_key_map()
