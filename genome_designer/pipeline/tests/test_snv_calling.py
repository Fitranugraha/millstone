"""
Tests for snv_calling.py
"""

import os

from django.test import TestCase
from django.test.utils import override_settings
import vcf

from main.models import AlignmentGroup
from main.models import Dataset
from main.models import ExperimentSample
from main.models import ExperimentSampleToAlignment
from main.models import get_dataset_with_type
from main.models import Project
from main.models import User
from main.models import Variant
from pipeline.snv_calling import call_snvs
from scripts.import_util import add_dataset_to_entity
from scripts.import_util import copy_and_add_dataset_source
from scripts.import_util import copy_dataset_to_entity_data_dir
from scripts.import_util import import_reference_genome_from_local_file
from settings import PWD as GD_ROOT


TEST_FASTA  = os.path.join(GD_ROOT, 'test_data', 'fake_genome_and_reads',
        'test_genome.fa')

TEST_FASTQ1 = os.path.join(GD_ROOT, 'test_data', 'fake_genome_and_reads',
        '38d786f2', 'test_genome_1.snps.simLibrary.1.fq')

TEST_FASTQ2 = os.path.join(GD_ROOT, 'test_data', 'fake_genome_and_reads',
        '38d786f2', 'test_genome_1.snps.simLibrary.2.fq')

TEST_SAMPLE_UID = '38d786f2'

TEST_BAM = os.path.join(GD_ROOT, 'test_data', 'fake_genome_and_reads',
        '38d786f2', 'bwa_align.sorted.grouped.realigned.bam')

TEST_BAM_INDEX = os.path.join(GD_ROOT, 'test_data', 'fake_genome_and_reads',
        '38d786f2', 'bwa_align.sorted.grouped.realigned.bam.bai')


class TestSNPCallers(TestCase):

    def setUp(self):
        user = User.objects.create_user('test_username', password='password',
                email='test@example.com')

        # Grab a project.
        self.project = Project.objects.create(title='test project',
                owner=user.get_profile())

        # Create a ref genome.
        self.reference_genome = import_reference_genome_from_local_file(
                self.project, 'ref_genome', TEST_FASTA, 'fasta')


    @override_settings(CELERY_EAGER_PROPAGATES_EXCEPTIONS = True,
        CELERY_ALWAYS_EAGER = True, BROKER_BACKEND = 'memory')
    def test_call_snvs(self):
        """Test running the pipeline that calls SNPS.

        This test doesn't check the accuracy of the SNP-calling. The test is
        intended just to run the pipeline and make sure there are no errors.
        """
        # Create a new alignment group.
        alignment_group = AlignmentGroup.objects.create(
                label='test alignment', reference_genome=self.reference_genome)

        # Create a sample.
        sample_1 = ExperimentSample.objects.create(
                uid=TEST_SAMPLE_UID,
                project=self.project,
                label='sample1')
        ### Add the raw reads
        copy_and_add_dataset_source(sample_1, Dataset.TYPE.FASTQ1,
                Dataset.TYPE.FASTQ1, TEST_FASTQ1)
        copy_and_add_dataset_source(sample_1, Dataset.TYPE.FASTQ2,
                Dataset.TYPE.FASTQ2, TEST_FASTQ2)

        # Create relationship between alignment and sample.
        sample_alignment = ExperimentSampleToAlignment.objects.create(
                alignment_group=alignment_group,
                experiment_sample=sample_1)
        ### Add alignment data. NOTE: Stored in sample model dir.
        copy_dest = copy_dataset_to_entity_data_dir(sample_1, TEST_BAM)
        copy_dataset_to_entity_data_dir(sample_1, TEST_BAM_INDEX)
        add_dataset_to_entity(sample_alignment, Dataset.TYPE.BWA_ALIGN,
                Dataset.TYPE.BWA_ALIGN, copy_dest)

        # Run the pipeline.
        call_snvs(alignment_group, project=self.project)

        # Check that the alignment group has a freebayes vcf dataset associated
        # with it.
        vcf_dataset = get_dataset_with_type(alignment_group,
                Dataset.TYPE.VCF_FREEBAYES)
        self.assertIsNotNone(vcf_dataset)

        # Make sure the .vcf file actually exists.
        self.assertTrue(os.path.exists(vcf_dataset.get_absolute_location()))

        # Make sure the vcf is valid by reading it using pyvcf.
        with open(vcf_dataset.get_absolute_location()) as vcf_fh:
            try:
                reader = vcf.Reader(vcf_fh)
                reader.next()
            except:
                self.fail("Not valid vcf")


    @override_settings(CELERY_EAGER_PROPAGATES_EXCEPTIONS = True,
        CELERY_ALWAYS_EAGER = True, BROKER_BACKEND = 'memory')
    def test_default_freebayes(self):
        """Test that freebayes with the default settings works for control
        input data.

        The test data is generated by starting with a short reference genome,
        manually introducing SNPs to create an alternate reference, and
        then running simNGS to create fake sequencing reads. Finally we align
        the fake sequencing reads back to the unmodified genome.  We expect
        freebayes to nail all of these "obvious" cases.
        """
        EXPECTED_NUM_VARIANTS = 30

        # We created the test genome with these specs.
        EXPECTED_VARIANT_POSITIONS = [800] # one-indexed.
        while len(EXPECTED_VARIANT_POSITIONS) < EXPECTED_NUM_VARIANTS:
            EXPECTED_VARIANT_POSITIONS.append(
                    EXPECTED_VARIANT_POSITIONS[-1] + 20)

        KNOWN_SUBSTITUTIONS_ROOT = os.path.join(GD_ROOT, 'test_data',
                'test_genome_known_substitutions')

        TEST_GENOME_FASTA = os.path.join(KNOWN_SUBSTITUTIONS_ROOT,
                'test_genome_known_substitutions.fa')

        FAKE_READS_FASTQ1 = os.path.join(KNOWN_SUBSTITUTIONS_ROOT,
                'test_genome_known_substitutions_0.snps.simLibrary.1.fq')

        FAKE_READS_FASTQ2 = os.path.join(KNOWN_SUBSTITUTIONS_ROOT,
                'test_genome_known_substitutions_0.snps.simLibrary.2.fq')

        FAKE_READS_SAMPLE_UID = '93b68da4'

        FAKE_READS_BAM = os.path.join(KNOWN_SUBSTITUTIONS_ROOT,
                'bwa_align.sorted.grouped.realigned.bam')

        FAKE_READS_BAM_INDEX = os.path.join(KNOWN_SUBSTITUTIONS_ROOT,
                'bwa_align.sorted.grouped.realigned.bam.bai')

        # Create a ref genome from the above.
        REFERENCE_GENOME = import_reference_genome_from_local_file(
                self.project, 'test_genome', TEST_GENOME_FASTA, 'fasta')

        # Create a new alignment group.
        alignment_group = AlignmentGroup.objects.create(
                label='test alignment', reference_genome=REFERENCE_GENOME)

        # Create a sample.
        sample_1 = ExperimentSample.objects.create(
                uid=FAKE_READS_SAMPLE_UID,
                project=self.project,
                label='sample1')
        ### Add the raw reads
        copy_and_add_dataset_source(sample_1, Dataset.TYPE.FASTQ1,
                Dataset.TYPE.FASTQ1, FAKE_READS_FASTQ1)
        copy_and_add_dataset_source(sample_1, Dataset.TYPE.FASTQ2,
                Dataset.TYPE.FASTQ2, FAKE_READS_FASTQ2)

        # Create alignment to the sample.
        sample_alignment = ExperimentSampleToAlignment.objects.create(
                alignment_group=alignment_group,
                experiment_sample=sample_1)
        ### Add alignment data. NOTE: Stored in sample model dir.
        copy_dest = copy_dataset_to_entity_data_dir(sample_1, FAKE_READS_BAM)
        copy_dataset_to_entity_data_dir(sample_1, FAKE_READS_BAM_INDEX)
        add_dataset_to_entity(sample_alignment, Dataset.TYPE.BWA_ALIGN,
                Dataset.TYPE.BWA_ALIGN, copy_dest)

        # Make sure there are no variants before.
        self.assertEqual(0, len(Variant.objects.filter(
                reference_genome=REFERENCE_GENOME)))

        # Run the pipeline.
        call_snvs(alignment_group, project=self.project)

        # Grab the resulting variants.
        variants = Variant.objects.filter(reference_genome=REFERENCE_GENOME)

        # There should be a Variant object for each record.
        self.assertEqual(EXPECTED_NUM_VARIANTS, len(variants))

        # Check that each variant is accounted for.
        self.assertEqual(set(EXPECTED_VARIANT_POSITIONS),
                set([v.position for v in variants]))
